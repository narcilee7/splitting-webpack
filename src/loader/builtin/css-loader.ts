import type { LoaderContext } from "../../types/config.js"

export default async function cssLoader(
    source: string,
    sourceMap: any,
    context: LoaderContext
): Promise<string> {
    try {
        // 简单的CSS处理：将CSS转换为字符串并导出
        const escapedCSS = source
            .replace(/\\/g, '\\\\')
            .replace(/`/g, '\\`')
            .replace(/\$/g, '\\$')

        // 生成JavaScript模块代码
        const moduleCode = `
// CSS Module generated by css-loader
const css = \`${escapedCSS}\`;

// 如果在浏览器环境中，自动插入样式
if (typeof document !== 'undefined') {
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);
}

export default css;
export { css };
`

        console.log(`🎨 CSS转换完成: ${context.resourcePath}`)
        return moduleCode.trim()

    } catch (error: any) {
        console.error(`❌ CSS Loader处理失败: ${context.resourcePath}`, error)
        throw new Error(`CSS Loader failed: ${error.message}`)
    }
} 