import type { LoaderContext } from "../../types/config.js"

export default async function jsonLoader(
    source: string,
    sourceMap: any,
    context: LoaderContext
): Promise<string> {
    try {
        // 验证JSON格式
        const data = JSON.parse(source)

        // 生成ES模块代码
        const moduleCode = `
// JSON Module generated by json-loader
const data = ${JSON.stringify(data, null, 2)};

export default data;
`

        console.log(`📄 JSON转换完成: ${context.resourcePath}`)
        return moduleCode.trim()

    } catch (error: any) {
        console.error(`❌ JSON Loader处理失败: ${context.resourcePath}`, error)

        if (error instanceof SyntaxError) {
            throw new Error(`Invalid JSON in ${context.resourcePath}: ${error.message}`)
        }

        throw new Error(`JSON Loader failed: ${error.message}`)
    }
} 